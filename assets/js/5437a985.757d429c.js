"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8383],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),u=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),k=a,d=m["".concat(o,".").concat(k)]||m[k]||c[k]||i;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=k;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),a=n(7294),i=n(6010),s=n(2466),l=n(6550),o=n(1980),u=n(7392),p=n(12);function m(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function c(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??m(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function k(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=c(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!k({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[o,u]=d({queryString:n,groupId:r}),[m,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,p.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),f=(()=>{const e=o??m;return k({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!k({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var f=n(2389);const g="tabList__CuJ",y="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:m}=(0,s.o5)(),c=e=>{const t=e.currentTarget,n=p.indexOf(t),r=u[n].value;r!==l&&(m(t),o(r))},k=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:k,onClick:c},s,{className:(0,i.Z)("tabs__item",y,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function w(e){let{lazy:t,children:n,selectedValue:r}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function N(e){const t=h(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",g)},a.createElement(b,(0,r.Z)({},e,t)),a.createElement(w,(0,r.Z)({},e,t)))}function v(e){const t=(0,f.Z)();return a.createElement(N,(0,r.Z)({key:String(t)},e))}},4205:(e,t,n)=>{n(7462),n(7294),n(3905)},9861:(e,t,n)=>{n.d(t,{ZP:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={toc:[{value:"Pre-requisites",id:"pre-requisites",level:4}]};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("p",null,"You need a fresh installation of Kratix for this section. The simplest way to do so is by running the quick-start script from within the Kratix directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/quick-start.sh --recreate\n")),(0,a.kt)("p",null,"Alternatively, you can go back to ",(0,a.kt)("a",{parentName:"p",href:"./installing-kratix"},"Installing Kratix")," and follow the appropriate guide."))}s.isMDXComponent=!0},7246:(e,t,n)=>{n.d(t,{ZP:()=>p,d$:()=>o});var r=n(7462),a=(n(7294),n(3905)),i=(n(4205),n(4996)),s=n(4866),l=n(5162);const o=[{value:"What&#39;s inside a Kratix Promise?",id:"whats-inside-a-kratix-promise",level:2},{value:"A Promise consists of three parts:",id:"a-promise-consists-of-three-parts",level:3},{value:"Recap: basics of getting a promised instance to your users",id:"recap-basics-of-getting-a-promised-instance-to-your-users",level:2},{value:"A Kratix Promise to deliver Jenkins",id:"a-kratix-promise-to-deliver-jenkins",level:2},{value:"Writing your own Kratix Promise",id:"writing-your-own-kratix-promise",level:2},{value:"Prepare your environment",id:"prepare-your-environment",level:3},{value:"Directory setup",id:"directory-setup",level:3},{value:"Generate a Promise template",id:"promise-template",level:3},{value:"Define your Promise API",id:"promise-api",level:3},{value:"Create your Resource Request Pipeline",id:"create-pipeline",level:3},{value:"Create your Promise instance base manifest",id:"base-instance",level:4},{value:"Build a simple request pipeline",id:"pipeline-script",level:4},{value:"Package your pipeline step as a Docker image",id:"docker-file",level:4},{value:"Test your pipeline image",id:"test-image",level:3},{value:"Define your <code>workerClusterResources</code> in your Promise definition",id:"worker-cluster-resources",level:3},{value:"Install your Promise",id:"install-promise",level:3},{value:"Create and submit a Kratix Resource Request",id:"create-resource-request",level:3},{value:"Review of a Kratix Promise parts (in detail)",id:"promise-review",level:3},{value:"<code>xaasCrd</code>",id:"xaascrd",level:4},{value:"<code>workerClusterResources</code>",id:"workerclusterresources",level:4},{value:"<code>xaasRequestPipeline</code>",id:"xaasrequestpipeline",level:4},{value:"Recap",id:"summary",level:2},{value:"Cleanup environment",id:"cleanup",level:2},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}],u={toc:o};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#whats-inside-a-kratix-promise"},"learn more about what's inside a Kratix Promise")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#writing-your-own-kratix-promise"},"write and install your own Kratix Promise"))),(0,a.kt)("h2",{id:"whats-inside-a-kratix-promise"},"What's inside a Kratix Promise?"),(0,a.kt)("p",null,"You've ",(0,a.kt)("a",{parentName:"p",href:"multiple-promises"},"installed Kratix and three sample Promises"),". Now you'll create a Promise from scratch."),(0,a.kt)("p",null,"From ",(0,a.kt)("a",{parentName:"p",href:"installing-a-promise"},"installing a Promise"),", a Kratix Promise is a YAML document that defines a contract between the platform and its users. It is what allows platforms to be built incrementally."),(0,a.kt)("h3",{id:"a-promise-consists-of-three-parts"},"A Promise consists of three parts:"),(0,a.kt)("img",{align:"right",src:(0,i.Z)("/img/docs/base-promise-structure.png"),alt:"Kratix logo"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd"),": the CRD that an application developer uses to request an instance of the Kratix Promise from the Platform Cluster."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),": a collection of Kubernetes resources that enable the creation of an instance and will be pre-installed in the Worker Clusters."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),": an ordered list of docker containers that result in the creation an instance of the promised service on a Worker Cluster.")),(0,a.kt)("h2",{id:"recap-basics-of-getting-a-promised-instance-to-your-users"},"Recap: basics of getting a promised instance to your users"),(0,a.kt)("p",null,"At a very high level"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You talk to users of your platform to find out what they're using and what they need."),(0,a.kt)("li",{parentName:"ul"},"You write a Kratix Promise for a service that your users and teams need.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd"),", you list what your users can configure in their request."),(0,a.kt)("li",{parentName:"ul"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),", you list what resources are required for Kratix to fulfil the Promise."),(0,a.kt)("li",{parentName:"ul"},"In ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),", you list Docker images that will take the user's request and decorate it with configuration that you or the business require."))),(0,a.kt)("li",{parentName:"ul"},"You install the Promise on your Platform Cluster, where Kratix is installed."),(0,a.kt)("li",{parentName:"ul"},"Your user wants an instance of the Promise."),(0,a.kt)("li",{parentName:"ul"},"Your user submit a Kratix Resource Request that lists what they want and how they want it, and this complies with the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd")," (more details on this request later)."),(0,a.kt)("li",{parentName:"ul"},"Kratix fires off the request pipeline that you defined in ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline")," and passes the Resource Request as an input."),(0,a.kt)("li",{parentName:"ul"},"The pipeline outputs valid Kubernetes documents that say what the user wants and what the business wants for that Promise instance."),(0,a.kt)("li",{parentName:"ul"},"The Worker Cluster has what it needs based on the ",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources")," and is ready to create the instance when the request comes through.")),(0,a.kt)("h2",{id:"a-kratix-promise-to-deliver-jenkins"},"A Kratix Promise to deliver Jenkins"),(0,a.kt)("p",null,"Imagine your platform team has received its fourth request from its fourth team for a Jenkins instance. You decide four times is too many times to manually set up Jenkins."),(0,a.kt)("p",null,"Now you'll write a Jenkins Promise and install it on your platform so that your four teams get Jenkins","\u2014","and you get time back for more valuable work."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"writing-your-own-kratix-promise"},"Writing your own Kratix Promise"),(0,a.kt)("p",null,"This guide will follow the steps below:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Define Promise")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#prepare-your-environment"},"Prepare your environment"),", if required"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#directory-setup"},"Directory setup")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#promise-template"},"Generate a Promise template"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: xaasCrd")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#promise-api"},"X as-a-Service Custom Resource Definition: define your Promise API"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: xaasRequestPipeline")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#base-instance"},"Create your Promise instance base manifest")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#pipeline-script"},"Build a simple request pipeline")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#dockerfile"},"Package your pipeline step as a Docker image")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#test-image"},"Test your container image"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Promise definition: workerClusterResources")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#worker-cluster-resources"},"Define your ",(0,a.kt)("inlineCode",{parentName:"a"},"workerClusterResources")," in your Promise definition"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Test Promise")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#install-promise"},"Install your Promise")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#create-resource-request"},"Create and submit a Kratix Resource Request")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#promise-review"},"Review of a Kratix Promise parts (in detail)")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#summary"},"Summary")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"#cleanup"},"Cleanup environment"))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"prepare-your-environment"},"Prepare your environment"),(0,a.kt)("h3",{id:"directory-setup"},"Directory setup"),(0,a.kt)("p",null,"To begin writing a Promise you will need a basic directory structure to work in. You can generate this folder structure in any local directory by running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p jenkins-promise/{resources,request-pipeline-image}\ncd jenkins-promise\n")),(0,a.kt)("h3",{id:"promise-template"},"Generate a Promise template"),(0,a.kt)("p",null,"Generate a basic ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise-template.yaml")," to work with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="jenkins-promise/jenkins-promise.yaml"',title:'"jenkins-promise/jenkins-promise.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: jenkins-promise\nspec:\n  workerClusterResources:\n  xaasRequestPipeline:\n  xaasCrd:\n")),(0,a.kt)("p",null,"You will fill in the fields under ",(0,a.kt)("inlineCode",{parentName:"p"},"spec")," as you progress through the tutorial."),(0,a.kt)("h3",{id:"promise-api"},"Define your Promise API"),(0,a.kt)("p",null,"For the purpose of this tutorial, you will create an API that accepts a single ",(0,a.kt)("inlineCode",{parentName:"p"},"string")," parameter called ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),". In real world scenarios, the API can be as simple or as complex you design it to be. The Promise API is defined within the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," of your Promise YAML."),(0,a.kt)("p",null,"Replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," field in ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise-template.yaml")," with the complete field details below. Ensure the indentation is correct (",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is nested under ",(0,a.kt)("inlineCode",{parentName:"p"},"spec"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="xaasCrd in jenkins-promise/jenkins-promise.yaml"',jsx:!0,title:'"xaasCrd',in:!0,'jenkins-promise/jenkins-promise.yaml"':!0},"  xaasCrd:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    metadata:\n      name: jenkins.example.promise.syntasso.io\n    spec:\n      group: example.promise.syntasso.io\n      scope: Namespaced\n      names:\n        plural: jenkins\n        singular: jenkins\n        kind: jenkins\n      versions:\n      - name: v1\n        served: true\n        storage: true\n        schema:\n          openAPIV3Schema:\n            type: object\n            properties:\n              spec:\n                type: object\n                properties:\n                  name:\n                    type: string\n")),(0,a.kt)("p",null,"You have now defined the as-a-Service API."),(0,a.kt)("h3",{id:"create-pipeline"},"Create your Resource Request Pipeline"),(0,a.kt)("h4",{id:"base-instance"},"Create your Promise instance base manifest"),(0,a.kt)("p",null,"Next build the pipeline to use details from a Kratix Promise ",(0,a.kt)("em",{parentName:"p"},"Resource Request")," into the Kubernetes resources required to create a running instance of the Jenkins service. For that, copy the YAML file below and save it in ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline-image/jenkins-instance.yaml"),"."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"CLICK HERE")," to expand the contents of the ",(0,a.kt)("code",null,"jenkins-instance.yaml")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="jenkins-promise/request-pipeline-image/jenkins-instance.yaml"',jsx:!0,title:'"jenkins-promise/request-pipeline-image/jenkins-instance.yaml"'},'apiVersion: jenkins.io/v1alpha2\nkind: Jenkins\nmetadata:\n  name: <tbr-name>\n  namespace: default\nspec:\n  configurationAsCode:\n    configurations: []\n    secret:\n      name: ""\n  groovyScripts:\n    configurations: []\n    secret:\n      name: ""\n  jenkinsAPISettings:\n    authorizationStrategy: createUser\n  master:\n    basePlugins:\n    - name: kubernetes\n      version: "1.31.3"\n    - name: workflow-job\n      version: "1180.v04c4e75dce43"\n    - name: workflow-aggregator\n      version: "2.7"\n    - name: git\n      version: "4.11.0"\n    - name: job-dsl\n      version: "1.79"\n    - name: configuration-as-code\n      version: "1414.v878271fc496f"\n    - name: kubernetes-credentials-provider\n      version: "0.20"\n    disableCSRFProtection: false\n    containers:\n      - name: jenkins-master\n        image: jenkins/jenkins:2.332.2-lts\n        imagePullPolicy: Always\n        livenessProbe:\n          failureThreshold: 12\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 100\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        readinessProbe:\n          failureThreshold: 10\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 80\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 1\n        resources:\n          limits:\n            cpu: 1500m\n            memory: 3Gi\n          requests:\n            cpu: "1"\n            memory: 500Mi\n'))),(0,a.kt)("h4",{id:"pipeline-script"},"Build a simple request pipeline"),(0,a.kt)("p",null,"Kratix takes no opinion on the tooling used within a pipeline. Kratix will pass\na set of resources to the pipeline, and expect back a set of resources. What\nhappens within the pipeline, and what tooling is used, is a decision left\nentirely to you. For further documentation on how pipelines work, check ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/reference/resource-requests/pipelines"},"Kratix\nPipelines")),(0,a.kt)("p",null,"For this example, you're taking a name from the Kratix Resource Request for an\ninstance and passing it to the Jenkins custom resource output."),(0,a.kt)("p",null,"To keep this transformation simple, you'll use a combination of ",(0,a.kt)("inlineCode",{parentName:"p"},"sed")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"yq"),"\nto do the work."),(0,a.kt)("p",null,"Create a script file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline-image")," directory called\n",(0,a.kt)("inlineCode",{parentName:"p"},"execute-pipeline.sh")," and copy the contents below. The script will be executed\nwhen the pipeline runs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash",metastring:'jsx title="jenkins-promise/request-pipeline-image/execute-pipeline.sh"',jsx:!0,title:'"jenkins-promise/request-pipeline-image/execute-pipeline.sh"'},"#!/bin/sh\n\nset -x\n\n#Get the name from the Promise Custom resource\ninstanceName=\\$(yq eval '.spec.name' /input/object.yaml)\n\n# Inject the name into the Jenkins resources\nfind /tmp/transfer -type f -exec sed -i \\\\\n  -e \"s/<tbr-name>/\\${instanceName//\\//\\\\/}/g\" \\\\\n  {} \\;\n\ncp /tmp/transfer/* /output/\n")),(0,a.kt)("p",null,"Then make it executable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x jenkins-promise/request-pipeline-image/execute-pipeline.sh\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Pipelines also have the capability to write back information to the resource requester\nby writing to the status. See ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/reference/resource-requests/status"},"status documentation for more infoformation.")),(0,a.kt)("h4",{id:"docker-file"},"Package your pipeline step as a Docker image"),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline-image")," directory and copy the contents below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:'jsx title="jenkins-promise/request-pipeline-image/Dockerfile"',jsx:!0,title:'"jenkins-promise/request-pipeline-image/Dockerfile"'},'FROM "mikefarah/yq:4"\nRUN [ "mkdir", "/tmp/transfer" ]\n\nADD jenkins-instance.yaml /tmp/transfer/jenkins-instance.yaml\nADD execute-pipeline.sh execute-pipeline.sh\n\nCMD [ "sh", "-c", "./execute-pipeline.sh"]\nENTRYPOINT []\n')),(0,a.kt)("br",null),(0,a.kt)("p",null,"Your file directory should now include the new file as shown below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},". \ud83d\udcc2 jenkins-promise\n  \u251c\u2500\u2500 jenkins-promise-template.yaml\n  \u251c\u2500\u2500 \ud83d\udcc2 request-pipeline-image\n  \u2502   \u251c\u2500\u2500 Dockerfile\n  \u2502   \u251c\u2500\u2500 execute-pipeline.sh\n  \u2502   \u2514\u2500\u2500 jenkins-instance.yaml\n  \u2514\u2500\u2500 \ud83d\udcc2 resources\n")),(0,a.kt)("p",null,"Next build your Docker image. You will later load the image to the KinD local cache, so there's no need to replace the image tag:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd jenkins-promise/request-pipeline-image\ndocker build --tag kratix-workshop/jenkins-request-pipeline:dev .\n")),(0,a.kt)("h3",{id:"test-image"},"Test your pipeline image"),(0,a.kt)("p",null,"Test the Docker container image by supplying an input resource and examining the output resource."),(0,a.kt)("p",null,"Create the test input and output directories locally within the ",(0,a.kt)("inlineCode",{parentName:"p"},"request-pipeline-image")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir jenkins-promise/request-pipeline-image/{input,output}\n")),(0,a.kt)("p",null,"Your file directory should now include the new file as shown below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},". \ud83d\udcc2 jenkins-promise\n  \u251c\u2500\u2500 jenkins-promise-template.yaml\n  \u251c\u2500\u2500 \ud83d\udcc2 request-pipeline-image\n  \u2502   \u251c\u2500\u2500 \ud83d\udcc2 \ud83c\udd95 input\n  \u2502   \u251c\u2500\u2500 \ud83d\udcc2 \ud83c\udd95 output\n  \u2502   \u251c\u2500\u2500 Dockerfile\n  \u2502   \u251c\u2500\u2500 execute-pipeline.sh\n  \u2502   \u2514\u2500\u2500 jenkins-instance.yaml\n  \u2514\u2500\u2500 \ud83d\udcc2 resources\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"/input")," directory is where your incoming Kratix Resource Request will be written when a user wants an instance."),(0,a.kt)("p",null,"Create a sample ",(0,a.kt)("inlineCode",{parentName:"p"},"object.yaml")," Resource Request in the ",(0,a.kt)("inlineCode",{parentName:"p"},"/input")," with the contents below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="jenkins-promise/request-pipeline-image/input/object.yaml"',jsx:!0,title:'"jenkins-promise/request-pipeline-image/input/object.yaml"'},"apiVersion: promise.example.com/v1\nkind: jenkins\nmetadata:\n  name: my-jenkins-promise-request\nspec:\n  name: my-amazing-jenkins\n")),(0,a.kt)("p",null,"Run the container and examine the output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd jenkins-promise/request-pipeline-image\ndocker run -v ${PWD}/input:/input -v ${PWD}/output:/output kratix-workshop/jenkins-request-pipeline:dev\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Verify the contents of the ",(0,a.kt)("inlineCode",{parentName:"p"},"output")," directory. These will be scheduled and deployed by Kratix to a Worker Cluster once the pipeline is executed, as a response for the Resource Request. They need to be valid Kubernetes resources that can be applied to any cluster with the Promise's ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," installed (see beneath)."),(0,a.kt)("p",null,"Once you are satisified that your pipeline is producing the expected result, load the Docker image to the local KinD cache:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kind load docker-image kratix-workshop/jenkins-request-pipeline:dev --name platform\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"The final step of creating the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," is to reference your docker image from the ",(0,a.kt)("inlineCode",{parentName:"p"},"spec.xaasRequestPipeline")," field in the ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise-template.yaml"),"."),(0,a.kt)("p",null,"Add the image to the array in ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise-template.yaml"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="jenkins-promise/jenkins-promise-template.yaml"',jsx:!0,title:'"jenkins-promise/jenkins-promise-template.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: jenkins-promise\nspec:\n  workerClusterResources:\n  #highlight-start\n  xaasRequestPipeline:\n  - kratix-workshop/jenkins-request-pipeline:dev\n  #highlight-end\n  xaasCrd:\n    ...\n")),(0,a.kt)("p",null,"In summary, you have:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Created a container image containing:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"A template file to be injected with per-instance details (",(0,a.kt)("inlineCode",{parentName:"li"},"jenkins-instance.yaml"),")"),(0,a.kt)("li",{parentName:"ul"},"A shell script to retrieve the per-instance details from the user's request, and inject them into the template (",(0,a.kt)("inlineCode",{parentName:"li"},"execute-pipeline.sh"),")"),(0,a.kt)("li",{parentName:"ul"},"A command set to the shell script"))),(0,a.kt)("li",{parentName:"ul"},"Created a set of directories(",(0,a.kt)("inlineCode",{parentName:"li"},"input"),"/",(0,a.kt)("inlineCode",{parentName:"li"},"output"),") and sample user request(",(0,a.kt)("inlineCode",{parentName:"li"},"input/object.yaml"),")"),(0,a.kt)("li",{parentName:"ul"},"Executed the pipeline image locally as a test"),(0,a.kt)("li",{parentName:"ul"},"Pushed the image to the registry"),(0,a.kt)("li",{parentName:"ul"},"Added the image to the Promise definition in the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline")," array")),(0,a.kt)("h3",{id:"worker-cluster-resources"},"Define your ",(0,a.kt)("inlineCode",{parentName:"h3"},"workerClusterResources")," in your Promise definition"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required to fulfil the Promise. Kratix applies this content on all registered Worker Clusters."),(0,a.kt)("p",null,"For this Promise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," needs to contain the Jenkins CRD, the Jenkins Operator, and the resources the Operator requires."),(0,a.kt)("p",null,"Run the following command from the ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise")," directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p resources\ncurl https://raw.githubusercontent.com/jenkinsci/kubernetes-operator/fbea1ed790e7a9deb2311e1f565ee93f07d89022/config/crd/bases/jenkins.io_jenkins.yaml --output resources/jenkins.io_jenkins.yaml --silent\ncurl https://raw.githubusercontent.com/jenkinsci/kubernetes-operator/8fee7f2806c363a5ceae569a725c17ef82ff2b58/deploy/all-in-one-v1alpha2.yaml --output resources/all-in-one-v1alpha2.yaml --silent\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"The commands above will download the necessary files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," directory. You are now ready to inject the Jenkins files into the ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise-template.yaml"),"."),(0,a.kt)("p",null,"To make this step simpler we have written a ",(0,a.kt)("em",{parentName:"p"},"very basic")," tool to grab all YAML documents from all YAML files located in ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," and inject them into the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," field."),(0,a.kt)("p",null,"To use this tool, you will need to download the correct binary for your computer from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/syntasso/kratix/releases/tag/v0.0.1"},"GitHub releases"),":"),(0,a.kt)(s.Z,{mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"darwin-amd64",label:"Intel Mac",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.1/worker-resource-builder-v0.0.0-1-darwin-amd64\nchmod +x worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"darwin-arm64",label:"Apple Silicon Mac",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.1/worker-resource-builder-v0.0.0-1-darwin-arm64\nchmod +x worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"linux-arm64",label:"Linux ARM64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.1/worker-resource-builder-v0.0.0-1-linux-arm64\nchmod +x worker-resource-builder\n"))),(0,a.kt)(l.Z,{value:"linux-amd64",label:"Linux AMD64",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"curl -sLo worker-resource-builder https://github.com/syntasso/kratix/releases/download/v0.0.1/worker-resource-builder-v0.0.0-1-linux-amd64\nchmod +x worker-resource-builder\n")))),(0,a.kt)("br",null),(0,a.kt)("p",null,"Once you have downloaded the correct binary, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./worker-resource-builder \\\n  -k8s-resources-directory ./resources \\\n  -promise ./jenkins-promise-template.yaml > ./jenkins-promise.yaml\n")),(0,a.kt)("p",null,"This created your finished Promise definition, ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise.yaml"),"."),(0,a.kt)("h3",{id:"install-promise"},"Install your Promise"),(0,a.kt)("p",null,"From your Promise directory, you can now install the Promise in Kratix."),(0,a.kt)("p",null,"At this point, your Promise directory structure should look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ud83d\udcc2 jenkins-promise\n\u251c\u2500\u2500 \ud83d\udcc2 request-pipeline-image\n\u2502\xa0  \u251c\u2500\u2500 \ud83d\udcc2  input\n\u2502\xa0  \u2502\xa0  \u2514\u2500\u2500 object.yaml\n\u2502\xa0  \u251c\u2500\u2500 \ud83d\udcc2  output\n\u2502\xa0  \u2502\xa0  \u2514\u2500\u2500 jenkins_instance.yaml\n\u2502\xa0  \u251c\u2500\u2500 Dockerfile\n\u2502\xa0  \u251c\u2500\u2500 execute-pipeline.sh\n\u2502\xa0  \u2514\u2500\u2500 jenkins-instance.yaml\n\u251c\u2500\u2500 \ud83d\udcc2 resources\n\u2502\xa0  \u251c\u2500\u2500 jenkins.io_jenkins.yaml\n\u2502\xa0  \u2514\u2500\u2500 all-in-one-v1alpha2.yaml\n\u2514\u2500\u2500 jenkins-promise-template.yaml\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Before installing your promise, verify that Kratix and MinIO are installed and healthy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get pods --namespace kratix-platform-system\n")),(0,a.kt)("p",null,"You should see something similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                                  READY   STATUS       RESTARTS   AGE\nkratix-platform-controller-manager-769855f9bb-8srtj   2/2     Running      0          1h\nminio-6f75d9fbcf-5cn7w                                1/1     Running      0          1h\n")),(0,a.kt)("p",null,"If that is not the case, please go back to ",(0,a.kt)("a",{parentName:"p",href:"#prepare-your-environment"},"Prepare your environment")," and follow the instructions."),(0,a.kt)("p",null,"From the ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise")," directory, run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply --context kind-platform --filename jenkins-promise.yaml\n")),(0,a.kt)("p",null,"Verify the Promise installed",(0,a.kt)("br",null),(0,a.kt)("sub",null,"(This may take a few minutes so ",(0,a.kt)("code",null,"--watch")," will watch the command. Press ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to stop watching)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get crds --watch\n")),(0,a.kt)("p",null,"The above command will give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                  CREATED AT\njenkins.example.promise.syntasso.io   2021-09-09T11:21:10Z\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"Verify the Jenkins Operator is running",(0,a.kt)("br",null),(0,a.kt)("sub",null,"(This may take a few minutes so ",(0,a.kt)("code",null,"--watch")," will watch the command. Press ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to stop watching)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get pods --watch\n")),(0,a.kt)("p",null,"The above command will give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                 READY   STATUS    RESTARTS   AGE\njenkins-operator-6c89d97d4f-r474w    1/1     Running   0          1m\n")),(0,a.kt)("h3",{id:"create-resource-request"},"Create and submit a Kratix Resource Request"),(0,a.kt)("p",null,"You can now request instances of Jenkins. Create a file in the ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-promise")," directory called ",(0,a.kt)("inlineCode",{parentName:"p"},"jenkins-resource-request.yaml")," with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jxs title="jenkins-promise/jenkins-resource-request.yaml"',jxs:!0,title:'"jenkins-promise/jenkins-resource-request.yaml"'},"apiVersion: example.promise.syntasso.io/v1\nkind: jenkins\nmetadata:\n  name: my-jenkins-promise-request\nspec:\n  name: my-amazing-jenkins\n")),(0,a.kt)("p",null,"You can now send the Resource Request to Kratix:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply --context kind-platform --filename jenkins-resource-request.yaml\n")),(0,a.kt)("p",null,"Applying the Kratix Promise will trigger your pipeline steps which in turn requests an instance of Jenkins from the operator. While the pipeline can run quite quickly, Jenkins requires quite a few resources to be installed including a deployment and a runner which means the full install may take a few minutes."),(0,a.kt)("p",null,"You can see a bit of what is happening by first looking for your pipeline completion"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get pods\n")),(0,a.kt)("p",null,"This should result in something similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                             READY   STATUS      RESTARTS   AGE\nrequest-pipeline-jenkins-promise-default-9d40b   0/1     Completed   0          1m\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"For more details, you can view the pipeline logs with"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs \\\n  --context kind-platform \\\n  --selector kratix-promise-id=jenkins-promise-default \\\n  --container xaas-request-pipeline-stage-1\n")),(0,a.kt)("p",null,"This should result in something like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"+ yq eval .spec.name /input/object.yaml\n+ instanceName=my-amazing-jenkins\n+ find /tmp/transfer -type f -exec sed -i -e 's/<tbr-name>/my-amazing-jenkins/g' '{}' ';'\n+ cp /tmp/transfer/jenkins-instance.yaml /output/\n")),(0,a.kt)("p",null,"Then you can watch for the creation of your Jenkins instance by targeting the Worker Cluster:",(0,a.kt)("br",null),(0,a.kt)("sub",null,"(This may take a few minutes so ",(0,a.kt)("code",null,"--watch")," will watch the command. Press ",(0,a.kt)("kbd",null,"Ctrl"),"+",(0,a.kt)("kbd",null,"C")," to stop watching)")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get pods --all-namespaces --watch\n")),(0,a.kt)("p",null,"The above command will eventually give an output similar to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                READY   STATUS    RESTARTS   AGE\njenkins-my-amazing-jenkins          1/1     Running   0          1m\n...\n")),(0,a.kt)("br",null),(0,a.kt)("p",null,"For verification, access the Jenkins UI in a browser, as in ",(0,a.kt)("a",{parentName:"p",href:"./installing-a-promise#use-your-jenkins-instance"},"previous steps"),"."),(0,a.kt)("p",null,"Let's now take a look at what you have done in more details."),(0,a.kt)("h3",{id:"promise-review"},"Review of a Kratix Promise parts (in detail)"),(0,a.kt)("h4",{id:"xaascrd"},(0,a.kt)("inlineCode",{parentName:"h4"},"xaasCrd")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is your user-facing API for the Promise. It defines the options that users can configure when they request the Promise. The complexity of the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCrd")," API is up to you. You can read more about writing Custom Resource Definitions in the ",(0,a.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#create-a-customresourcedefinition"},"Kubernetes docs"),"."),(0,a.kt)("h4",{id:"workerclusterresources"},(0,a.kt)("inlineCode",{parentName:"h4"},"workerClusterResources")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required to fulfil the Promise. Kratix applies this content on all registered Worker Clusters. For instance with the Jenkins Promise, the ",(0,a.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," contains the Jenkins CRD, the Jenkins Operator, and the resources the Operator requires."),(0,a.kt)("h4",{id:"xaasrequestpipeline"},(0,a.kt)("inlineCode",{parentName:"h4"},"xaasRequestPipeline")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," defines a set of jobs to run when Kratix receives a request for an instance of one of its Promises."),(0,a.kt)("p",null,"The pipeline is an array of Docker images, and those images are executed in order. The pipeline enables you to write Promises with specialised images and combine those images as needed."),(0,a.kt)("p",null,"Each container in the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," array should output complete, valid Kubernetes resources."),(0,a.kt)("p",null,"The contract with each pipeline container is simple and straightforward:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The first container in the list receives the resource document created by the\nuser's request","\u2014","this request will comply with the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd")," described\nabove. The document will be always available to the pipeline in\n",(0,a.kt)("inlineCode",{parentName:"li"},"/input/object.yaml"),"."),(0,a.kt)("li",{parentName:"ul"},"The container's command then executes with the input object and fulfils its\nresponsibilites. "),(0,a.kt)("li",{parentName:"ul"},"The container writes any resources to be created to ",(0,a.kt)("inlineCode",{parentName:"li"},"/output/"),"."),(0,a.kt)("li",{parentName:"ul"},"The resources in ",(0,a.kt)("inlineCode",{parentName:"li"},"/output")," of the last container in the ",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline")," array will be scheduled and applied to the appropriate Worker Clusters.")),(0,a.kt)("h2",{id:"summary"},"Recap"),(0,a.kt)("p",null,"You have now authored your first promise. Congratulations \ud83c\udf89"),(0,a.kt)("p",null,"To recap the steps we took:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Generated a Kratix Promise template"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"xaasCrd"),": Defined your Promise API with a X as-a-Service Custom Resource Definition"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Created your Promise instance base manifest"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline"),": Built a simple request pipeline"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Packaged the pipeline as a Docker image"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Tested the pipeline Docker image"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"li"},"workerClusterResources"),": Defined what needs to be present on your Worker Clusters to fulfil this Promise"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Installed your Kratix Promise"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Created and submitted a Kratix Resource Request"),(0,a.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Reviewed the components of a Promise")),(0,a.kt)("h2",{id:"cleanup"},"Cleanup environment"),(0,a.kt)("p",null,"To clean up your environment first delete the Resource Requests for the Jenkins instance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform delete --filename jenkins-resource-request.yaml\n")),(0,a.kt)("p",null,"Verify the resources belonging to the Resource Requests have been deleted in the Worker Cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get pods\n")),(0,a.kt)("p",null,"Now the Resource Requests have been deleted you can delete the Promises"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform delete --filename jenkins-promise.yaml\n")),(0,a.kt)("p",null,"Verify the Worker Cluster Resources are deleted from the Worker Cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get pods\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"--congratulations"},"\ud83c\udf89 ","\xa0"," Congratulations!"),(0,a.kt)("p",null,"\u2705","\xa0","\xa0"," You have written a Kratix Promise. ",(0,a.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Let's ",(0,a.kt)("a",{parentName:"p",href:"./enhancing-a-promise"},"see how to tailor Kratix Promises based on organisational context"),"."))}p.isMDXComponent=!0},7559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var r=n(7462),a=(n(7294),n(3905)),i=n(9861),s=n(7246);const l={description:"Guide on how to write and package a Kratix Promise",title:"Writing a Promise"},o=void 0,u={unversionedId:"main/guides/writing-a-promise",id:"main/guides/writing-a-promise",title:"Writing a Promise",description:"Guide on how to write and package a Kratix Promise",source:"@site/docs/main/04-guides/04-writing-a-promise.md",sourceDirName:"main/04-guides",slug:"/main/guides/writing-a-promise",permalink:"/docs/main/guides/writing-a-promise",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/04-guides/04-writing-a-promise.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Guide on how to write and package a Kratix Promise",title:"Writing a Promise"},sidebar:"mainSidebar",previous:{title:"Using Multiple Promises",permalink:"/docs/main/guides/multiple-promises"},next:{title:"Enhancing a Promise",permalink:"/docs/main/guides/enhancing-a-promise"}},p={},m=[...s.d$],c={toc:m};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(i.ZP,{mdxType:"PartialPreRequisites"}),(0,a.kt)(s.ZP,{mdxType:"WritingPromise"}))}k.isMDXComponent=!0}}]);
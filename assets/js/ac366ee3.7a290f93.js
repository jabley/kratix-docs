"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[5919],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(r),d=a,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,s(s({ref:t},c),{},{components:r})):n.createElement(f,s({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[p]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5359:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const o={title:"Resource Request Status",sidebar_label:"Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field"},s="Status",i={unversionedId:"main/reference/resource-requests/status",id:"main/reference/resource-requests/status",title:"Resource Request Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field",source:"@site/docs/main/05-reference/05-resource-requests/04-status.md",sourceDirName:"main/05-reference/05-resource-requests",slug:"/main/reference/resource-requests/status",permalink:"/docs/main/reference/resource-requests/status",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-reference/05-resource-requests/04-status.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Resource Request Status",sidebar_label:"Status",description:"Documentation on how to expose information from the Pipeline to the Platform user through the Resource Request Status field"},sidebar:"mainSidebar",previous:{title:"Deleting",permalink:"/docs/main/reference/resource-requests/deleting-a-resource-request"},next:{title:"Scheduling",permalink:"/docs/main/reference/scheduling"}},u={},l=[],c={toc:l};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"status"},"Status"),(0,a.kt)("p",null,"As part of your pipeline you can optionally send information about the\nresource request back to the resource requester by writing information to ",(0,a.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml"),".\nThe file can contain arbitrary key values, with the ",(0,a.kt)("inlineCode",{parentName:"p"},"message")," key being a special key that is communicated back\nto the user when running ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get <resource-request>"),". For example if my pipeline wrote the\nfollowing to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/metadata/status.yaml")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"message: Resource request provisioned with database size 10Gb\nconnectionDetails:\n  host: example.com\n  dbName: root\n")),(0,a.kt)("p",null,"Kratix would pickup the status and apply it back to the resource request. The\nuser would see the following when getting the resource request:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl get database\nNAME                   STATUS\nexample                Resource request provisioned with database size 10Gb\n")),(0,a.kt)("p",null,"And if they inspected the full status output ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl get database example -o yaml"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: example.promise.syntasso.io/v1\nkind: Database\n...\nstatus:\n message: Resource request provisioned with database size 10Gb\n connectionDetails:\n   host: example.com\n   dbName: root\n")),(0,a.kt)("p",null,"They will see all the additional key values. Status provides a simple way to\ncommunicate information back to the resource requester. Kratix will automatically\ninject the required fields for status into the ",(0,a.kt)("inlineCode",{parentName:"p"},"xaasCRD"),",you do not have to manually\nadd these fields."))}p.isMDXComponent=!0}}]);